# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: layer/bridge/genesis.proto, layer/bridge/params.proto, layer/bridge/query.proto, layer/bridge/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base import v1beta1 as __cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgRequestAttestations(betterproto.Message):
    creator: str = betterproto.string_field(1)
    query_id: str = betterproto.string_field(2)
    timestamp: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgRequestAttestationsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgWithdrawTokens(betterproto.Message):
    creator: str = betterproto.string_field(1)
    recipient: str = betterproto.string_field(2)
    amount: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgWithdrawTokensResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgClaimDepositRequest(betterproto.Message):
    creator: str = betterproto.string_field(1)
    deposit_id: int = betterproto.uint64_field(2)
    index: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgClaimDepositResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryGetEvmValidatorsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryGetEvmValidatorsResponse(betterproto.Message):
    bridge_validator_set: List["QueryBridgeValidator"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValidatorCheckpointRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryGetValidatorCheckpointResponse(betterproto.Message):
    validator_checkpoint: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryBridgeValidator(betterproto.Message):
    ethereum_address: str = betterproto.string_field(1)
    power: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryBridgeValidatorSet(betterproto.Message):
    bridge_validator_set: List["QueryBridgeValidator"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BridgeValidator(betterproto.Message):
    ethereum_address: bytes = betterproto.bytes_field(1)
    power: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class BridgeValidatorSet(betterproto.Message):
    bridge_validator_set: List["BridgeValidator"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BridgeValidatorSetParams(betterproto.Message):
    bridge_validator_set: "BridgeValidatorSet" = betterproto.message_field(1)
    validator_timestamp: int = betterproto.int64_field(2)
    validator_power_threshold: int = betterproto.int64_field(3)
    validator_set_hash: bytes = betterproto.bytes_field(4)
    validator_checkpoint: bytes = betterproto.bytes_field(5)


@dataclass(eq=False, repr=False)
class BridgeValidatorSetCheckpointParams(betterproto.Message):
    validator_timestamp: int = betterproto.int64_field(1)
    validator_power_threshold: int = betterproto.int64_field(2)
    validator_set_hash: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class BridgeValidatorSetCheckpoint(betterproto.Message):
    validator_checkpoint: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValidatorCheckpointParamsRequest(betterproto.Message):
    timestamp: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValidatorCheckpointParamsResponse(betterproto.Message):
    checkpoint: str = betterproto.string_field(1)
    valset_hash: str = betterproto.string_field(2)
    timestamp: int = betterproto.int64_field(3)
    power_threshold: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class QueryGetValidatorTimestampByIndexRequest(betterproto.Message):
    index: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValidatorTimestampByIndexResponse(betterproto.Message):
    timestamp: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValsetSigsRequest(betterproto.Message):
    timestamp: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValsetSigsResponse(betterproto.Message):
    signatures: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetEvmAddressByValidatorAddressRequest(betterproto.Message):
    validator_address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetEvmAddressByValidatorAddressResponse(betterproto.Message):
    evm_address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValsetByTimestampRequest(betterproto.Message):
    timestamp: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValsetByTimestampResponse(betterproto.Message):
    bridge_validator_set: List["QueryBridgeValidator"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGetSnapshotsByReportRequest(betterproto.Message):
    query_id: str = betterproto.string_field(1)
    timestamp: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryGetSnapshotsByReportResponse(betterproto.Message):
    snapshots: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetAttestationDataBySnapshotRequest(betterproto.Message):
    snapshot: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetAttestationDataBySnapshotResponse(betterproto.Message):
    query_id: str = betterproto.string_field(1)
    timestamp: str = betterproto.string_field(2)
    aggregate_value: str = betterproto.string_field(3)
    aggregate_power: str = betterproto.string_field(4)
    checkpoint: str = betterproto.string_field(5)
    attestation_timestamp: str = betterproto.string_field(6)
    previous_report_timestamp: str = betterproto.string_field(7)
    next_report_timestamp: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class QueryGetAttestationsBySnapshotRequest(betterproto.Message):
    snapshot: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetAttestationsBySnapshotResponse(betterproto.Message):
    attestations: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValidatorSetIndexByTimestampRequest(betterproto.Message):
    timestamp: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryGetValidatorSetIndexByTimestampResponse(betterproto.Message):
    index: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryGetCurrentValidatorSetTimestampRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryGetCurrentValidatorSetTimestampResponse(betterproto.Message):
    timestamp: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the bridge module's genesis state."""

    params: "Params" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    async def request_attestations(
        self,
        msg_request_attestations: "MsgRequestAttestations",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRequestAttestationsResponse":
        return await self._unary_unary(
            "/layer.bridge.Msg/RequestAttestations",
            msg_request_attestations,
            MsgRequestAttestationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdraw_tokens(
        self,
        msg_withdraw_tokens: "MsgWithdrawTokens",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgWithdrawTokensResponse":
        return await self._unary_unary(
            "/layer.bridge.Msg/WithdrawTokens",
            msg_withdraw_tokens,
            MsgWithdrawTokensResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def claim_deposit(
        self,
        msg_claim_deposit_request: "MsgClaimDepositRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgClaimDepositResponse":
        return await self._unary_unary(
            "/layer.bridge.Msg/ClaimDeposit",
            msg_claim_deposit_request,
            MsgClaimDepositResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_evm_validators(
        self,
        query_get_evm_validators_request: "QueryGetEvmValidatorsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetEvmValidatorsResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetEvmValidators",
            query_get_evm_validators_request,
            QueryGetEvmValidatorsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_validator_checkpoint(
        self,
        query_get_validator_checkpoint_request: "QueryGetValidatorCheckpointRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetValidatorCheckpointResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetValidatorCheckpoint",
            query_get_validator_checkpoint_request,
            QueryGetValidatorCheckpointResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_validator_checkpoint_params(
        self,
        query_get_validator_checkpoint_params_request: "QueryGetValidatorCheckpointParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetValidatorCheckpointParamsResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetValidatorCheckpointParams",
            query_get_validator_checkpoint_params_request,
            QueryGetValidatorCheckpointParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_validator_timestamp_by_index(
        self,
        query_get_validator_timestamp_by_index_request: "QueryGetValidatorTimestampByIndexRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetValidatorTimestampByIndexResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetValidatorTimestampByIndex",
            query_get_validator_timestamp_by_index_request,
            QueryGetValidatorTimestampByIndexResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_valset_sigs(
        self,
        query_get_valset_sigs_request: "QueryGetValsetSigsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetValsetSigsResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetValsetSigs",
            query_get_valset_sigs_request,
            QueryGetValsetSigsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_evm_address_by_validator_address(
        self,
        query_get_evm_address_by_validator_address_request: "QueryGetEvmAddressByValidatorAddressRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetEvmAddressByValidatorAddressResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetEvmAddressByValidatorAddress",
            query_get_evm_address_by_validator_address_request,
            QueryGetEvmAddressByValidatorAddressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_valset_by_timestamp(
        self,
        query_get_valset_by_timestamp_request: "QueryGetValsetByTimestampRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetValsetByTimestampResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetValsetByTimestamp",
            query_get_valset_by_timestamp_request,
            QueryGetValsetByTimestampResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_snapshots_by_report(
        self,
        query_get_snapshots_by_report_request: "QueryGetSnapshotsByReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetSnapshotsByReportResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetSnapshotsByReport",
            query_get_snapshots_by_report_request,
            QueryGetSnapshotsByReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_attestation_data_by_snapshot(
        self,
        query_get_attestation_data_by_snapshot_request: "QueryGetAttestationDataBySnapshotRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetAttestationDataBySnapshotResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetAttestationDataBySnapshot",
            query_get_attestation_data_by_snapshot_request,
            QueryGetAttestationDataBySnapshotResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_attestations_by_snapshot(
        self,
        query_get_attestations_by_snapshot_request: "QueryGetAttestationsBySnapshotRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetAttestationsBySnapshotResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetAttestationsBySnapshot",
            query_get_attestations_by_snapshot_request,
            QueryGetAttestationsBySnapshotResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_validator_set_index_by_timestamp(
        self,
        query_get_validator_set_index_by_timestamp_request: "QueryGetValidatorSetIndexByTimestampRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetValidatorSetIndexByTimestampResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetValidatorSetIndexByTimestamp",
            query_get_validator_set_index_by_timestamp_request,
            QueryGetValidatorSetIndexByTimestampResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_validator_set_timestamp(
        self,
        query_get_current_validator_set_timestamp_request: "QueryGetCurrentValidatorSetTimestampRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetCurrentValidatorSetTimestampResponse":
        return await self._unary_unary(
            "/layer.bridge.Query/GetCurrentValidatorSetTimestamp",
            query_get_current_validator_set_timestamp_request,
            QueryGetCurrentValidatorSetTimestampResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def request_attestations(
        self, msg_request_attestations: "MsgRequestAttestations"
    ) -> "MsgRequestAttestationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def withdraw_tokens(
        self, msg_withdraw_tokens: "MsgWithdrawTokens"
    ) -> "MsgWithdrawTokensResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def claim_deposit(
        self, msg_claim_deposit_request: "MsgClaimDepositRequest"
    ) -> "MsgClaimDepositResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_request_attestations(
        self,
        stream: "grpclib.server.Stream[MsgRequestAttestations, MsgRequestAttestationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.request_attestations(request)
        await stream.send_message(response)

    async def __rpc_withdraw_tokens(
        self,
        stream: "grpclib.server.Stream[MsgWithdrawTokens, MsgWithdrawTokensResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.withdraw_tokens(request)
        await stream.send_message(response)

    async def __rpc_claim_deposit(
        self,
        stream: "grpclib.server.Stream[MsgClaimDepositRequest, MsgClaimDepositResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.claim_deposit(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.bridge.Msg/RequestAttestations": grpclib.const.Handler(
                self.__rpc_request_attestations,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRequestAttestations,
                MsgRequestAttestationsResponse,
            ),
            "/layer.bridge.Msg/WithdrawTokens": grpclib.const.Handler(
                self.__rpc_withdraw_tokens,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgWithdrawTokens,
                MsgWithdrawTokensResponse,
            ),
            "/layer.bridge.Msg/ClaimDeposit": grpclib.const.Handler(
                self.__rpc_claim_deposit,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgClaimDepositRequest,
                MsgClaimDepositResponse,
            ),
        }


class QueryBase(ServiceBase):

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_evm_validators(
        self, query_get_evm_validators_request: "QueryGetEvmValidatorsRequest"
    ) -> "QueryGetEvmValidatorsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_validator_checkpoint(
        self,
        query_get_validator_checkpoint_request: "QueryGetValidatorCheckpointRequest",
    ) -> "QueryGetValidatorCheckpointResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_validator_checkpoint_params(
        self,
        query_get_validator_checkpoint_params_request: "QueryGetValidatorCheckpointParamsRequest",
    ) -> "QueryGetValidatorCheckpointParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_validator_timestamp_by_index(
        self,
        query_get_validator_timestamp_by_index_request: "QueryGetValidatorTimestampByIndexRequest",
    ) -> "QueryGetValidatorTimestampByIndexResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_valset_sigs(
        self, query_get_valset_sigs_request: "QueryGetValsetSigsRequest"
    ) -> "QueryGetValsetSigsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_evm_address_by_validator_address(
        self,
        query_get_evm_address_by_validator_address_request: "QueryGetEvmAddressByValidatorAddressRequest",
    ) -> "QueryGetEvmAddressByValidatorAddressResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_valset_by_timestamp(
        self, query_get_valset_by_timestamp_request: "QueryGetValsetByTimestampRequest"
    ) -> "QueryGetValsetByTimestampResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_snapshots_by_report(
        self, query_get_snapshots_by_report_request: "QueryGetSnapshotsByReportRequest"
    ) -> "QueryGetSnapshotsByReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_attestation_data_by_snapshot(
        self,
        query_get_attestation_data_by_snapshot_request: "QueryGetAttestationDataBySnapshotRequest",
    ) -> "QueryGetAttestationDataBySnapshotResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_attestations_by_snapshot(
        self,
        query_get_attestations_by_snapshot_request: "QueryGetAttestationsBySnapshotRequest",
    ) -> "QueryGetAttestationsBySnapshotResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_validator_set_index_by_timestamp(
        self,
        query_get_validator_set_index_by_timestamp_request: "QueryGetValidatorSetIndexByTimestampRequest",
    ) -> "QueryGetValidatorSetIndexByTimestampResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_current_validator_set_timestamp(
        self,
        query_get_current_validator_set_timestamp_request: "QueryGetCurrentValidatorSetTimestampRequest",
    ) -> "QueryGetCurrentValidatorSetTimestampResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_get_evm_validators(
        self,
        stream: "grpclib.server.Stream[QueryGetEvmValidatorsRequest, QueryGetEvmValidatorsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_evm_validators(request)
        await stream.send_message(response)

    async def __rpc_get_validator_checkpoint(
        self,
        stream: "grpclib.server.Stream[QueryGetValidatorCheckpointRequest, QueryGetValidatorCheckpointResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_validator_checkpoint(request)
        await stream.send_message(response)

    async def __rpc_get_validator_checkpoint_params(
        self,
        stream: "grpclib.server.Stream[QueryGetValidatorCheckpointParamsRequest, QueryGetValidatorCheckpointParamsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_validator_checkpoint_params(request)
        await stream.send_message(response)

    async def __rpc_get_validator_timestamp_by_index(
        self,
        stream: "grpclib.server.Stream[QueryGetValidatorTimestampByIndexRequest, QueryGetValidatorTimestampByIndexResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_validator_timestamp_by_index(request)
        await stream.send_message(response)

    async def __rpc_get_valset_sigs(
        self,
        stream: "grpclib.server.Stream[QueryGetValsetSigsRequest, QueryGetValsetSigsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_valset_sigs(request)
        await stream.send_message(response)

    async def __rpc_get_evm_address_by_validator_address(
        self,
        stream: "grpclib.server.Stream[QueryGetEvmAddressByValidatorAddressRequest, QueryGetEvmAddressByValidatorAddressResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_evm_address_by_validator_address(request)
        await stream.send_message(response)

    async def __rpc_get_valset_by_timestamp(
        self,
        stream: "grpclib.server.Stream[QueryGetValsetByTimestampRequest, QueryGetValsetByTimestampResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_valset_by_timestamp(request)
        await stream.send_message(response)

    async def __rpc_get_snapshots_by_report(
        self,
        stream: "grpclib.server.Stream[QueryGetSnapshotsByReportRequest, QueryGetSnapshotsByReportResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_snapshots_by_report(request)
        await stream.send_message(response)

    async def __rpc_get_attestation_data_by_snapshot(
        self,
        stream: "grpclib.server.Stream[QueryGetAttestationDataBySnapshotRequest, QueryGetAttestationDataBySnapshotResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_attestation_data_by_snapshot(request)
        await stream.send_message(response)

    async def __rpc_get_attestations_by_snapshot(
        self,
        stream: "grpclib.server.Stream[QueryGetAttestationsBySnapshotRequest, QueryGetAttestationsBySnapshotResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_attestations_by_snapshot(request)
        await stream.send_message(response)

    async def __rpc_get_validator_set_index_by_timestamp(
        self,
        stream: "grpclib.server.Stream[QueryGetValidatorSetIndexByTimestampRequest, QueryGetValidatorSetIndexByTimestampResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_validator_set_index_by_timestamp(request)
        await stream.send_message(response)

    async def __rpc_get_current_validator_set_timestamp(
        self,
        stream: "grpclib.server.Stream[QueryGetCurrentValidatorSetTimestampRequest, QueryGetCurrentValidatorSetTimestampResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_current_validator_set_timestamp(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.bridge.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/layer.bridge.Query/GetEvmValidators": grpclib.const.Handler(
                self.__rpc_get_evm_validators,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetEvmValidatorsRequest,
                QueryGetEvmValidatorsResponse,
            ),
            "/layer.bridge.Query/GetValidatorCheckpoint": grpclib.const.Handler(
                self.__rpc_get_validator_checkpoint,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetValidatorCheckpointRequest,
                QueryGetValidatorCheckpointResponse,
            ),
            "/layer.bridge.Query/GetValidatorCheckpointParams": grpclib.const.Handler(
                self.__rpc_get_validator_checkpoint_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetValidatorCheckpointParamsRequest,
                QueryGetValidatorCheckpointParamsResponse,
            ),
            "/layer.bridge.Query/GetValidatorTimestampByIndex": grpclib.const.Handler(
                self.__rpc_get_validator_timestamp_by_index,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetValidatorTimestampByIndexRequest,
                QueryGetValidatorTimestampByIndexResponse,
            ),
            "/layer.bridge.Query/GetValsetSigs": grpclib.const.Handler(
                self.__rpc_get_valset_sigs,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetValsetSigsRequest,
                QueryGetValsetSigsResponse,
            ),
            "/layer.bridge.Query/GetEvmAddressByValidatorAddress": grpclib.const.Handler(
                self.__rpc_get_evm_address_by_validator_address,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetEvmAddressByValidatorAddressRequest,
                QueryGetEvmAddressByValidatorAddressResponse,
            ),
            "/layer.bridge.Query/GetValsetByTimestamp": grpclib.const.Handler(
                self.__rpc_get_valset_by_timestamp,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetValsetByTimestampRequest,
                QueryGetValsetByTimestampResponse,
            ),
            "/layer.bridge.Query/GetSnapshotsByReport": grpclib.const.Handler(
                self.__rpc_get_snapshots_by_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetSnapshotsByReportRequest,
                QueryGetSnapshotsByReportResponse,
            ),
            "/layer.bridge.Query/GetAttestationDataBySnapshot": grpclib.const.Handler(
                self.__rpc_get_attestation_data_by_snapshot,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetAttestationDataBySnapshotRequest,
                QueryGetAttestationDataBySnapshotResponse,
            ),
            "/layer.bridge.Query/GetAttestationsBySnapshot": grpclib.const.Handler(
                self.__rpc_get_attestations_by_snapshot,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetAttestationsBySnapshotRequest,
                QueryGetAttestationsBySnapshotResponse,
            ),
            "/layer.bridge.Query/GetValidatorSetIndexByTimestamp": grpclib.const.Handler(
                self.__rpc_get_validator_set_index_by_timestamp,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetValidatorSetIndexByTimestampRequest,
                QueryGetValidatorSetIndexByTimestampResponse,
            ),
            "/layer.bridge.Query/GetCurrentValidatorSetTimestamp": grpclib.const.Handler(
                self.__rpc_get_current_validator_set_timestamp,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetCurrentValidatorSetTimestampRequest,
                QueryGetCurrentValidatorSetTimestampResponse,
            ),
        }
