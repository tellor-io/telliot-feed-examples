# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: layer/oracle/aggregate.proto, layer/oracle/aggregate_reporter.proto, layer/oracle/commit_report.proto, layer/oracle/genesis.proto, layer/oracle/micro_report.proto, layer/oracle/params.proto, layer/oracle/query.proto, layer/oracle/query_id_timestamp_pair.proto, layer/oracle/query_meta.proto, layer/oracle/reports.proto, layer/oracle/tips.proto, layer/oracle/tx.proto, layer/oracle/user_tip.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base import v1beta1 as __cosmos_base_v1_beta1__
from ...cosmos.base.query import v1beta1 as __cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    min_stake_amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    """MsgUpdateParams is the Msg/UpdateParams request type."""

    authority: str = betterproto.string_field(1)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    params: "Params" = betterproto.message_field(2)
    """
    params defines the module parameters to update.
    
     NOTE: All parameters must be supplied.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgSubmitValue(betterproto.Message):
    creator: str = betterproto.string_field(1)
    query_data: bytes = betterproto.bytes_field(2)
    value: str = betterproto.string_field(3)
    salt: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgSubmitValueResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCommitReport(betterproto.Message):
    creator: str = betterproto.string_field(1)
    query_data: bytes = betterproto.bytes_field(2)
    hash: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgCommitReportResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgTip(betterproto.Message):
    tipper: str = betterproto.string_field(1)
    query_data: bytes = betterproto.bytes_field(2)
    amount: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgTipResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUpdateCyclelist(betterproto.Message):
    """MsgUpdateCycleRequest is the Msg/UpdateCycle request type."""

    authority: str = betterproto.string_field(1)
    """
    authority is the address that controls the module (defaults to x/gov unless overwritten).
    """

    cyclelist: List[bytes] = betterproto.bytes_field(2)
    """list of query data hex strings"""


@dataclass(eq=False, repr=False)
class MsgUpdateCyclelistResponse(betterproto.Message):
    """MsgUpdateCycleResponse defines the Msg/UpdateCycle response type."""

    pass


@dataclass(eq=False, repr=False)
class MicroReport(betterproto.Message):
    """MicroReport represents data for a single report"""

    reporter: str = betterproto.string_field(1)
    """reporter is the address of the reporter"""

    power: int = betterproto.int64_field(2)
    """the power of the reporter based on total tokens normalized"""

    query_type: str = betterproto.string_field(3)
    """string identifier of the data spec"""

    query_id: bytes = betterproto.bytes_field(4)
    """hash of the query data"""

    aggregate_method: str = betterproto.string_field(5)
    """
    aggregate method to use for aggregating all the reports for the query id
    """

    value: str = betterproto.string_field(6)
    """hex string of the response value"""

    timestamp: datetime = betterproto.message_field(7)
    """timestamp of when the report was created"""

    cyclelist: bool = betterproto.bool_field(8)
    """indicates if the report's query id is in the cyclelist"""

    block_number: int = betterproto.int64_field(9)
    """block number of when the report was created"""


@dataclass(eq=False, repr=False)
class Reports(betterproto.Message):
    micro_reports: List["MicroReport"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryMeta(betterproto.Message):
    """QueryMeta represents the metadata of a query"""

    id: int = betterproto.uint64_field(1)
    """unique id of the query that changes after query's lifecycle ends"""

    amount: str = betterproto.string_field(2)
    """amount of tokens that was tipped"""

    expiration: datetime = betterproto.message_field(3)
    """expiration time of the query"""

    registry_spec_timeframe: timedelta = betterproto.message_field(4)
    """timeframe of the query according to the data spec"""

    has_revealed_reports: bool = betterproto.bool_field(5)
    """indicates whether query has revealed reports"""

    query_id: bytes = betterproto.bytes_field(6)
    """unique id of the query according to the data spec"""

    query_type: str = betterproto.string_field(7)
    """string identifier of the data spec"""


@dataclass(eq=False, repr=False)
class UserTipTotal(betterproto.Message):
    address: str = betterproto.string_field(1)
    total: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryIdTimestampPair(betterproto.Message):
    query_id: bytes = betterproto.bytes_field(1)
    timestamp: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryIdTimestampPairsArray(betterproto.Message):
    pairs: List["QueryIdTimestampPair"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Commit(betterproto.Message):
    reporter: str = betterproto.string_field(1)
    query_id: bytes = betterproto.bytes_field(2)
    hash: str = betterproto.string_field(3)
    incycle: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class Tip(betterproto.Message):
    """
    // Tips is a struct that contains the query data and the amount it was tipped
    """

    query_data: bytes = betterproto.bytes_field(1)
    amount: str = betterproto.string_field(2)
    """the amount that was tipped"""


@dataclass(eq=False, repr=False)
class AggregateReporter(betterproto.Message):
    reporter: str = betterproto.string_field(1)
    power: int = betterproto.int64_field(2)
    block_number: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class Aggregate(betterproto.Message):
    """aggregate struct to represent meta data of an aggregate report"""

    query_id: bytes = betterproto.bytes_field(1)
    """query_id is the id of the query"""

    aggregate_value: str = betterproto.string_field(2)
    """aggregate_value is the value of the aggregate"""

    aggregate_reporter: str = betterproto.string_field(3)
    """aggregate_reporter is the address of the reporter"""

    reporter_power: int = betterproto.int64_field(4)
    """reporter_power is the power of the reporter"""

    standard_deviation: float = betterproto.double_field(5)
    """
    standard_deviation is the standard deviation of the reports that were aggregated
    """

    reporters: List["AggregateReporter"] = betterproto.message_field(6)
    """list of reporters that were included in the aggregate"""

    flagged: bool = betterproto.bool_field(7)
    """flagged is true if the aggregate was flagged by a dispute"""

    index: int = betterproto.uint64_field(8)
    """nonce is the nonce of the aggregate"""

    aggregate_report_index: int = betterproto.int64_field(9)
    """
    aggregate_report_index is the index of the aggregate report in the micro reports
    """

    height: int = betterproto.int64_field(10)
    """height of the aggregate report"""

    micro_height: int = betterproto.int64_field(11)
    """height of the micro report"""


@dataclass(eq=False, repr=False)
class AvailableTimestamps(betterproto.Message):
    timestamps: List[datetime] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryMicroReportsResponse(betterproto.Message):
    micro_reports: List["MicroReport"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryGetReportsbyQidRequest(betterproto.Message):
    query_id: str = betterproto.string_field(1)
    """query id of requested data"""

    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryGetReportsbyReporterRequest(betterproto.Message):
    reporter: str = betterproto.string_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryGetReportsbyReporterQidRequest(betterproto.Message):
    reporter: str = betterproto.string_field(1)
    query_id: str = betterproto.string_field(2)
    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(3)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryGetCurrentTipRequest(betterproto.Message):
    query_data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetCurrentTipResponse(betterproto.Message):
    tips: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetUserTipTotalRequest(betterproto.Message):
    tipper: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetUserTipTotalResponse(betterproto.Message):
    total_tips: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryGetDataBeforeRequest(betterproto.Message):
    query_id: str = betterproto.string_field(1)
    timestamp: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryGetDataBeforeResponse(betterproto.Message):
    aggregate: "Aggregate" = betterproto.message_field(1)
    timestamp: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryGetTimeBasedRewardsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryGetTimeBasedRewardsResponse(betterproto.Message):
    reward: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryCurrentCyclelistQueryRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryCurrentCyclelistQueryResponse(betterproto.Message):
    query_data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryRetrieveDataRequest(betterproto.Message):
    query_id: str = betterproto.string_field(1)
    timestamp: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryRetrieveDataResponse(betterproto.Message):
    aggregate: "Aggregate" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGetCurrentAggregateReportRequest(betterproto.Message):
    """
    QueryGetCurrentAggregateReportRequest is the request type for the Query/GetCurrentAggregateReport RPC method.
    """

    query_id: str = betterproto.string_field(1)
    """query_id defines the query id hex string."""


@dataclass(eq=False, repr=False)
class QueryGetCurrentAggregateReportResponse(betterproto.Message):
    """
    QueryGetCurrentAggregateReportResponse is the response type for the Query/GetCurrentAggregateReport RPC method.
    """

    aggregate: "Aggregate" = betterproto.message_field(1)
    """aggregate defines the current aggregate report."""

    timestamp: int = betterproto.uint64_field(2)
    """timestamp defines the timestamp of the aggregate report."""


@dataclass(eq=False, repr=False)
class QueryGetAggregateBeforeByReporterRequest(betterproto.Message):
    """
    QueryGetAggregateBeforeByReporterRequest is the request type for the Query/GetAggregateBeforeByReporter RPC method.
    """

    query_id: str = betterproto.string_field(1)
    """query_id defines the query id hex string."""

    timestamp: int = betterproto.int64_field(2)
    """timestamp defines the timestamp of the aggregate report."""

    reporter: str = betterproto.string_field(3)
    """reporter defines the reporter address."""


@dataclass(eq=False, repr=False)
class QueryGetAggregateBeforeByReporterResponse(betterproto.Message):
    """
    QueryGetAggregateBeforeByReporterResponse is the response type for the Query/GetAggregateBeforeByReporter RPC method.
    """

    aggregate: "Aggregate" = betterproto.message_field(1)
    """aggregate defines the aggregate report."""


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the oracle module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    cyclelist: List[bytes] = betterproto.bytes_field(2)


class MsgStub(betterproto.ServiceStub):
    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/layer.oracle.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def submit_value(
        self,
        msg_submit_value: "MsgSubmitValue",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSubmitValueResponse":
        return await self._unary_unary(
            "/layer.oracle.Msg/SubmitValue",
            msg_submit_value,
            MsgSubmitValueResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def commit_report(
        self,
        msg_commit_report: "MsgCommitReport",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCommitReportResponse":
        return await self._unary_unary(
            "/layer.oracle.Msg/CommitReport",
            msg_commit_report,
            MsgCommitReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def tip(
        self,
        msg_tip: "MsgTip",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgTipResponse":
        return await self._unary_unary(
            "/layer.oracle.Msg/Tip",
            msg_tip,
            MsgTipResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_cyclelist(
        self,
        msg_update_cyclelist: "MsgUpdateCyclelist",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateCyclelistResponse":
        return await self._unary_unary(
            "/layer.oracle.Msg/UpdateCyclelist",
            msg_update_cyclelist,
            MsgUpdateCyclelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reportsby_qid(
        self,
        query_get_reportsby_qid_request: "QueryGetReportsbyQidRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryMicroReportsResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/GetReportsbyQid",
            query_get_reportsby_qid_request,
            QueryMicroReportsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reportsby_reporter(
        self,
        query_get_reportsby_reporter_request: "QueryGetReportsbyReporterRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryMicroReportsResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/GetReportsbyReporter",
            query_get_reportsby_reporter_request,
            QueryMicroReportsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reportsby_reporter_qid(
        self,
        query_get_reportsby_reporter_qid_request: "QueryGetReportsbyReporterQidRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryMicroReportsResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/GetReportsbyReporterQid",
            query_get_reportsby_reporter_qid_request,
            QueryMicroReportsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_tip(
        self,
        query_get_current_tip_request: "QueryGetCurrentTipRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetCurrentTipResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/GetCurrentTip",
            query_get_current_tip_request,
            QueryGetCurrentTipResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user_tip_total(
        self,
        query_get_user_tip_total_request: "QueryGetUserTipTotalRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetUserTipTotalResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/GetUserTipTotal",
            query_get_user_tip_total_request,
            QueryGetUserTipTotalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_data_before(
        self,
        query_get_data_before_request: "QueryGetDataBeforeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetDataBeforeResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/GetDataBefore",
            query_get_data_before_request,
            QueryGetDataBeforeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_time_based_rewards(
        self,
        query_get_time_based_rewards_request: "QueryGetTimeBasedRewardsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetTimeBasedRewardsResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/GetTimeBasedRewards",
            query_get_time_based_rewards_request,
            QueryGetTimeBasedRewardsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def current_cyclelist_query(
        self,
        query_current_cyclelist_query_request: "QueryCurrentCyclelistQueryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCurrentCyclelistQueryResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/CurrentCyclelistQuery",
            query_current_cyclelist_query_request,
            QueryCurrentCyclelistQueryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def retrieve_data(
        self,
        query_retrieve_data_request: "QueryRetrieveDataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRetrieveDataResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/RetrieveData",
            query_retrieve_data_request,
            QueryRetrieveDataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_aggregate_report(
        self,
        query_get_current_aggregate_report_request: "QueryGetCurrentAggregateReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetCurrentAggregateReportResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/GetCurrentAggregateReport",
            query_get_current_aggregate_report_request,
            QueryGetCurrentAggregateReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_aggregate_before_by_reporter(
        self,
        query_get_aggregate_before_by_reporter_request: "QueryGetAggregateBeforeByReporterRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetAggregateBeforeByReporterResponse":
        return await self._unary_unary(
            "/layer.oracle.Query/GetAggregateBeforeByReporter",
            query_get_aggregate_before_by_reporter_request,
            QueryGetAggregateBeforeByReporterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def submit_value(
        self, msg_submit_value: "MsgSubmitValue"
    ) -> "MsgSubmitValueResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def commit_report(
        self, msg_commit_report: "MsgCommitReport"
    ) -> "MsgCommitReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def tip(self, msg_tip: "MsgTip") -> "MsgTipResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_cyclelist(
        self, msg_update_cyclelist: "MsgUpdateCyclelist"
    ) -> "MsgUpdateCyclelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    async def __rpc_submit_value(
        self, stream: "grpclib.server.Stream[MsgSubmitValue, MsgSubmitValueResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.submit_value(request)
        await stream.send_message(response)

    async def __rpc_commit_report(
        self, stream: "grpclib.server.Stream[MsgCommitReport, MsgCommitReportResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.commit_report(request)
        await stream.send_message(response)

    async def __rpc_tip(
        self, stream: "grpclib.server.Stream[MsgTip, MsgTipResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.tip(request)
        await stream.send_message(response)

    async def __rpc_update_cyclelist(
        self,
        stream: "grpclib.server.Stream[MsgUpdateCyclelist, MsgUpdateCyclelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_cyclelist(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.oracle.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
            "/layer.oracle.Msg/SubmitValue": grpclib.const.Handler(
                self.__rpc_submit_value,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSubmitValue,
                MsgSubmitValueResponse,
            ),
            "/layer.oracle.Msg/CommitReport": grpclib.const.Handler(
                self.__rpc_commit_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCommitReport,
                MsgCommitReportResponse,
            ),
            "/layer.oracle.Msg/Tip": grpclib.const.Handler(
                self.__rpc_tip,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgTip,
                MsgTipResponse,
            ),
            "/layer.oracle.Msg/UpdateCyclelist": grpclib.const.Handler(
                self.__rpc_update_cyclelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateCyclelist,
                MsgUpdateCyclelistResponse,
            ),
        }


class QueryBase(ServiceBase):

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reportsby_qid(
        self, query_get_reportsby_qid_request: "QueryGetReportsbyQidRequest"
    ) -> "QueryMicroReportsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reportsby_reporter(
        self, query_get_reportsby_reporter_request: "QueryGetReportsbyReporterRequest"
    ) -> "QueryMicroReportsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reportsby_reporter_qid(
        self,
        query_get_reportsby_reporter_qid_request: "QueryGetReportsbyReporterQidRequest",
    ) -> "QueryMicroReportsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_current_tip(
        self, query_get_current_tip_request: "QueryGetCurrentTipRequest"
    ) -> "QueryGetCurrentTipResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user_tip_total(
        self, query_get_user_tip_total_request: "QueryGetUserTipTotalRequest"
    ) -> "QueryGetUserTipTotalResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_data_before(
        self, query_get_data_before_request: "QueryGetDataBeforeRequest"
    ) -> "QueryGetDataBeforeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_time_based_rewards(
        self, query_get_time_based_rewards_request: "QueryGetTimeBasedRewardsRequest"
    ) -> "QueryGetTimeBasedRewardsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def current_cyclelist_query(
        self, query_current_cyclelist_query_request: "QueryCurrentCyclelistQueryRequest"
    ) -> "QueryCurrentCyclelistQueryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def retrieve_data(
        self, query_retrieve_data_request: "QueryRetrieveDataRequest"
    ) -> "QueryRetrieveDataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_current_aggregate_report(
        self,
        query_get_current_aggregate_report_request: "QueryGetCurrentAggregateReportRequest",
    ) -> "QueryGetCurrentAggregateReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_aggregate_before_by_reporter(
        self,
        query_get_aggregate_before_by_reporter_request: "QueryGetAggregateBeforeByReporterRequest",
    ) -> "QueryGetAggregateBeforeByReporterResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_get_reportsby_qid(
        self,
        stream: "grpclib.server.Stream[QueryGetReportsbyQidRequest, QueryMicroReportsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reportsby_qid(request)
        await stream.send_message(response)

    async def __rpc_get_reportsby_reporter(
        self,
        stream: "grpclib.server.Stream[QueryGetReportsbyReporterRequest, QueryMicroReportsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reportsby_reporter(request)
        await stream.send_message(response)

    async def __rpc_get_reportsby_reporter_qid(
        self,
        stream: "grpclib.server.Stream[QueryGetReportsbyReporterQidRequest, QueryMicroReportsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reportsby_reporter_qid(request)
        await stream.send_message(response)

    async def __rpc_get_current_tip(
        self,
        stream: "grpclib.server.Stream[QueryGetCurrentTipRequest, QueryGetCurrentTipResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_current_tip(request)
        await stream.send_message(response)

    async def __rpc_get_user_tip_total(
        self,
        stream: "grpclib.server.Stream[QueryGetUserTipTotalRequest, QueryGetUserTipTotalResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user_tip_total(request)
        await stream.send_message(response)

    async def __rpc_get_data_before(
        self,
        stream: "grpclib.server.Stream[QueryGetDataBeforeRequest, QueryGetDataBeforeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_data_before(request)
        await stream.send_message(response)

    async def __rpc_get_time_based_rewards(
        self,
        stream: "grpclib.server.Stream[QueryGetTimeBasedRewardsRequest, QueryGetTimeBasedRewardsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_time_based_rewards(request)
        await stream.send_message(response)

    async def __rpc_current_cyclelist_query(
        self,
        stream: "grpclib.server.Stream[QueryCurrentCyclelistQueryRequest, QueryCurrentCyclelistQueryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.current_cyclelist_query(request)
        await stream.send_message(response)

    async def __rpc_retrieve_data(
        self,
        stream: "grpclib.server.Stream[QueryRetrieveDataRequest, QueryRetrieveDataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.retrieve_data(request)
        await stream.send_message(response)

    async def __rpc_get_current_aggregate_report(
        self,
        stream: "grpclib.server.Stream[QueryGetCurrentAggregateReportRequest, QueryGetCurrentAggregateReportResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_current_aggregate_report(request)
        await stream.send_message(response)

    async def __rpc_get_aggregate_before_by_reporter(
        self,
        stream: "grpclib.server.Stream[QueryGetAggregateBeforeByReporterRequest, QueryGetAggregateBeforeByReporterResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_aggregate_before_by_reporter(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.oracle.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/layer.oracle.Query/GetReportsbyQid": grpclib.const.Handler(
                self.__rpc_get_reportsby_qid,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetReportsbyQidRequest,
                QueryMicroReportsResponse,
            ),
            "/layer.oracle.Query/GetReportsbyReporter": grpclib.const.Handler(
                self.__rpc_get_reportsby_reporter,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetReportsbyReporterRequest,
                QueryMicroReportsResponse,
            ),
            "/layer.oracle.Query/GetReportsbyReporterQid": grpclib.const.Handler(
                self.__rpc_get_reportsby_reporter_qid,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetReportsbyReporterQidRequest,
                QueryMicroReportsResponse,
            ),
            "/layer.oracle.Query/GetCurrentTip": grpclib.const.Handler(
                self.__rpc_get_current_tip,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetCurrentTipRequest,
                QueryGetCurrentTipResponse,
            ),
            "/layer.oracle.Query/GetUserTipTotal": grpclib.const.Handler(
                self.__rpc_get_user_tip_total,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetUserTipTotalRequest,
                QueryGetUserTipTotalResponse,
            ),
            "/layer.oracle.Query/GetDataBefore": grpclib.const.Handler(
                self.__rpc_get_data_before,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetDataBeforeRequest,
                QueryGetDataBeforeResponse,
            ),
            "/layer.oracle.Query/GetTimeBasedRewards": grpclib.const.Handler(
                self.__rpc_get_time_based_rewards,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetTimeBasedRewardsRequest,
                QueryGetTimeBasedRewardsResponse,
            ),
            "/layer.oracle.Query/CurrentCyclelistQuery": grpclib.const.Handler(
                self.__rpc_current_cyclelist_query,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCurrentCyclelistQueryRequest,
                QueryCurrentCyclelistQueryResponse,
            ),
            "/layer.oracle.Query/RetrieveData": grpclib.const.Handler(
                self.__rpc_retrieve_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRetrieveDataRequest,
                QueryRetrieveDataResponse,
            ),
            "/layer.oracle.Query/GetCurrentAggregateReport": grpclib.const.Handler(
                self.__rpc_get_current_aggregate_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetCurrentAggregateReportRequest,
                QueryGetCurrentAggregateReportResponse,
            ),
            "/layer.oracle.Query/GetAggregateBeforeByReporter": grpclib.const.Handler(
                self.__rpc_get_aggregate_before_by_reporter,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetAggregateBeforeByReporterRequest,
                QueryGetAggregateBeforeByReporterResponse,
            ),
        }
