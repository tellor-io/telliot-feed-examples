# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: layer/registry/data_spec.proto, layer/registry/genesis.proto, layer/registry/params.proto, layer/registry/query.proto, layer/registry/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import timedelta
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class AbiComponent(betterproto.Message):
    """ABIComponent is a specification for how to interpret abi_components"""

    name: str = betterproto.string_field(1)
    """name"""

    field_type: str = betterproto.string_field(2)
    """type"""

    nested_component: List["AbiComponent"] = betterproto.message_field(3)
    """consider taking this recursion out and make it once only"""


@dataclass(eq=False, repr=False)
class DataSpec(betterproto.Message):
    """DataSpec is a specification for how to interpret and aggregate data"""

    document_hash: str = betterproto.string_field(1)
    """ipfs hash of the data spec"""

    response_value_type: str = betterproto.string_field(2)
    """the value's datatype for decoding the value"""

    abi_components: List["AbiComponent"] = betterproto.message_field(3)
    """the abi components for decoding"""

    aggregation_method: str = betterproto.string_field(4)
    """
    how to aggregate the data (ie. average, median, mode, etc) for aggregating reports and arriving at final value
    """

    registrar: str = betterproto.string_field(5)
    """address that originally registered the data spec"""

    report_buffer_window: timedelta = betterproto.message_field(6)
    """
    report_buffer_window specifies the duration of the time window following an initial report
     during which additional reports can be submitted. This duration acts as a buffer, allowing
     a collection of related reports in a defined time frame. The window ensures that all
     pertinent reports are aggregated together before arriving at a final value. This defaults
     to 0s if not specified.
     extensions: treat as a golang time.duration, don't allow nil values, don't omit empty values
    """


@dataclass(eq=False, repr=False)
class MsgRegisterSpec(betterproto.Message):
    """MsgRegisterSpec defines the Msg/RegisterSpec request type."""

    registrar: str = betterproto.string_field(1)
    """address that registers the data spec"""

    query_type: str = betterproto.string_field(2)
    """name of the query type (ie. "SpotPrice")"""

    spec: "DataSpec" = betterproto.message_field(3)
    """data spec"""


@dataclass(eq=False, repr=False)
class MsgRegisterSpecResponse(betterproto.Message):
    """MsgRegisterSpecResponse defines the Msg/RegisterSpec response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgUpdateDataSpec(betterproto.Message):
    """MsgUpdateDataSpec is the Msg/UpdateDataSpec request type."""

    authority: str = betterproto.string_field(1)
    """authority is the address that is allowed calling this msg."""

    query_type: str = betterproto.string_field(2)
    """query type to update"""

    spec: "DataSpec" = betterproto.message_field(3)
    """data spec update"""


@dataclass(eq=False, repr=False)
class MsgUpdateDataSpecResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    max_report_buffer_window: timedelta = betterproto.message_field(1)
    """max report buffer window"""


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryGetDataSpecRequest(betterproto.Message):
    """
    QueryGetDataSpecRequest is request type for the Query/GetDataSpec RPC method.
    """

    query_type: str = betterproto.string_field(1)
    """queryType is the key to fetch a the corresponding data spec."""


@dataclass(eq=False, repr=False)
class QueryGetDataSpecResponse(betterproto.Message):
    """
    QueryGetDataSpecResponse is response type for the Query/GetDataSpec RPC method.
    """

    spec: "DataSpec" = betterproto.message_field(1)
    """spec is the data spec corresponding to the query type."""


@dataclass(eq=False, repr=False)
class QueryDecodeQuerydataRequest(betterproto.Message):
    """
    QueryDecodeQuerydataRequest is request type for the Query/DecodeQuerydata RPC method.
    """

    query_data: bytes = betterproto.bytes_field(1)
    """query_data is the query data hex string to be decoded."""


@dataclass(eq=False, repr=False)
class QueryDecodeQuerydataResponse(betterproto.Message):
    """
    QueryDecodeQuerydataResponse is response type for the Query/DecodeQuerydata RPC method.
    """

    spec: str = betterproto.string_field(1)
    """spec is the decoded json represention of the query data hex string."""


@dataclass(eq=False, repr=False)
class QueryGenerateQuerydataRequest(betterproto.Message):
    """
    QueryGenerateQuerydataRequest is request type for the Query/GenerateQuerydata RPC method.
    """

    querytype: str = betterproto.string_field(1)
    """querytype for which query_data is to be generated."""

    parameters: str = betterproto.string_field(2)
    """parameters for which query_data is to be generated."""


@dataclass(eq=False, repr=False)
class QueryGenerateQuerydataResponse(betterproto.Message):
    """
    QueryGenerateQuerydataResponse is response type for the Query/GenerateQuerydata RPC method.
    """

    query_data: bytes = betterproto.bytes_field(1)
    """query_data is the generated query_data hex string."""


@dataclass(eq=False, repr=False)
class QueryDecodeValueRequest(betterproto.Message):
    """
    QueryDecodeValueRequest is request type for the Query/DecodeValue RPC method.
    """

    query_type: str = betterproto.string_field(1)
    """queryType is the key to fetch a the corresponding data spec."""

    value: str = betterproto.string_field(2)
    """value is the value hex string to be decoded."""


@dataclass(eq=False, repr=False)
class QueryDecodeValueResponse(betterproto.Message):
    """
    QueryDecodeValueResponse is response type for the Query/DecodeValue RPC method.
    """

    decoded_value: str = betterproto.string_field(1)
    """decodedValue is the decoded value of the hex string."""


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the registry module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    """params defines all the paramaters of the registry module."""

    dataspec: "DataSpec" = betterproto.message_field(2)
    """Initial data specs"""


class MsgStub(betterproto.ServiceStub):
    async def register_spec(
        self,
        msg_register_spec: "MsgRegisterSpec",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRegisterSpecResponse":
        return await self._unary_unary(
            "/layer.registry.Msg/RegisterSpec",
            msg_register_spec,
            MsgRegisterSpecResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_data_spec(
        self,
        msg_update_data_spec: "MsgUpdateDataSpec",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateDataSpecResponse":
        return await self._unary_unary(
            "/layer.registry.Msg/UpdateDataSpec",
            msg_update_data_spec,
            MsgUpdateDataSpecResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/layer.registry.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_data_spec(
        self,
        query_get_data_spec_request: "QueryGetDataSpecRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGetDataSpecResponse":
        return await self._unary_unary(
            "/layer.registry.Query/GetDataSpec",
            query_get_data_spec_request,
            QueryGetDataSpecResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def decode_querydata(
        self,
        query_decode_querydata_request: "QueryDecodeQuerydataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDecodeQuerydataResponse":
        return await self._unary_unary(
            "/layer.registry.Query/DecodeQuerydata",
            query_decode_querydata_request,
            QueryDecodeQuerydataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def generate_querydata(
        self,
        query_generate_querydata_request: "QueryGenerateQuerydataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGenerateQuerydataResponse":
        return await self._unary_unary(
            "/layer.registry.Query/GenerateQuerydata",
            query_generate_querydata_request,
            QueryGenerateQuerydataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def decode_value(
        self,
        query_decode_value_request: "QueryDecodeValueRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDecodeValueResponse":
        return await self._unary_unary(
            "/layer.registry.Query/DecodeValue",
            query_decode_value_request,
            QueryDecodeValueResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def register_spec(
        self, msg_register_spec: "MsgRegisterSpec"
    ) -> "MsgRegisterSpecResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_data_spec(
        self, msg_update_data_spec: "MsgUpdateDataSpec"
    ) -> "MsgUpdateDataSpecResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_register_spec(
        self, stream: "grpclib.server.Stream[MsgRegisterSpec, MsgRegisterSpecResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.register_spec(request)
        await stream.send_message(response)

    async def __rpc_update_data_spec(
        self,
        stream: "grpclib.server.Stream[MsgUpdateDataSpec, MsgUpdateDataSpecResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_data_spec(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.registry.Msg/RegisterSpec": grpclib.const.Handler(
                self.__rpc_register_spec,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRegisterSpec,
                MsgRegisterSpecResponse,
            ),
            "/layer.registry.Msg/UpdateDataSpec": grpclib.const.Handler(
                self.__rpc_update_data_spec,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateDataSpec,
                MsgUpdateDataSpecResponse,
            ),
        }


class QueryBase(ServiceBase):

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_data_spec(
        self, query_get_data_spec_request: "QueryGetDataSpecRequest"
    ) -> "QueryGetDataSpecResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def decode_querydata(
        self, query_decode_querydata_request: "QueryDecodeQuerydataRequest"
    ) -> "QueryDecodeQuerydataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def generate_querydata(
        self, query_generate_querydata_request: "QueryGenerateQuerydataRequest"
    ) -> "QueryGenerateQuerydataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def decode_value(
        self, query_decode_value_request: "QueryDecodeValueRequest"
    ) -> "QueryDecodeValueResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_get_data_spec(
        self,
        stream: "grpclib.server.Stream[QueryGetDataSpecRequest, QueryGetDataSpecResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_data_spec(request)
        await stream.send_message(response)

    async def __rpc_decode_querydata(
        self,
        stream: "grpclib.server.Stream[QueryDecodeQuerydataRequest, QueryDecodeQuerydataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.decode_querydata(request)
        await stream.send_message(response)

    async def __rpc_generate_querydata(
        self,
        stream: "grpclib.server.Stream[QueryGenerateQuerydataRequest, QueryGenerateQuerydataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.generate_querydata(request)
        await stream.send_message(response)

    async def __rpc_decode_value(
        self,
        stream: "grpclib.server.Stream[QueryDecodeValueRequest, QueryDecodeValueResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.decode_value(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.registry.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/layer.registry.Query/GetDataSpec": grpclib.const.Handler(
                self.__rpc_get_data_spec,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGetDataSpecRequest,
                QueryGetDataSpecResponse,
            ),
            "/layer.registry.Query/DecodeQuerydata": grpclib.const.Handler(
                self.__rpc_decode_querydata,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDecodeQuerydataRequest,
                QueryDecodeQuerydataResponse,
            ),
            "/layer.registry.Query/GenerateQuerydata": grpclib.const.Handler(
                self.__rpc_generate_querydata,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGenerateQuerydataRequest,
                QueryGenerateQuerydataResponse,
            ),
            "/layer.registry.Query/DecodeValue": grpclib.const.Handler(
                self.__rpc_decode_value,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDecodeValueRequest,
                QueryDecodeValueResponse,
            ),
        }
