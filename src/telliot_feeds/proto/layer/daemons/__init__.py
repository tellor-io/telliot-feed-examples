# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: layer/daemons/median_values.proto, layer/daemons/pricefeed.proto, layer/daemons/token_bridge.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class UpdateMarketPricesRequest(betterproto.Message):
    """
    UpdateMarketPriceRequest is a request message updating market prices.
    """

    market_price_updates: List["MarketPriceUpdate"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateMarketPricesResponse(betterproto.Message):
    """
    UpdateMarketPricesResponse is a response message for updating market prices.
    """

    pass


@dataclass(eq=False, repr=False)
class ExchangePrice(betterproto.Message):
    """ExchangePrice represents a specific exchange's market price"""

    exchange_id: str = betterproto.string_field(1)
    price: int = betterproto.uint64_field(2)
    last_update_time: datetime = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MarketPriceUpdate(betterproto.Message):
    """MarketPriceUpdate represents an update to a single market"""

    market_id: int = betterproto.uint32_field(1)
    exchange_prices: List["ExchangePrice"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MedianValues(betterproto.Message):
    """MedianValues is the median value for a market"""

    market_id: int = betterproto.uint32_field(1)
    """marketId is the market id for a pair"""

    price: int = betterproto.uint64_field(2)
    exponent: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GetAllMedianValuesRequest(betterproto.Message):
    """
    GetAllMedianValuesRequest is the request for the GetAllMedianValues rpc
    """

    pass


@dataclass(eq=False, repr=False)
class GetAllMedianValuesResponse(betterproto.Message):
    """
    GetAllMedianValuesResponse is the response for the GetAllMedianValues rpc
    """

    median_values: List["MedianValues"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetMedianValueRequest(betterproto.Message):
    """GetMedianValuesRequest is the request for the GetMedianValues rpc"""

    query_data: bytes = betterproto.bytes_field(1)
    """query data to fetch prices for"""


@dataclass(eq=False, repr=False)
class GetMedianValueResponse(betterproto.Message):
    """GetMedianValueResponse is the response for the GetMedianValue rpc"""

    median_values: "MedianValues" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetPendingDepositReportRequest(betterproto.Message):
    """
    GetPendingDepositReportRequest is a request message for getting pending bridge deposits.
    """

    pass


@dataclass(eq=False, repr=False)
class GetPendingDepositReportResponse(betterproto.Message):
    """
    GetPendingDepositReportResponse is a response message for getting pending bridge deposits.
    """

    query_data: bytes = betterproto.bytes_field(1)
    value: bytes = betterproto.bytes_field(2)


class PriceFeedServiceStub(betterproto.ServiceStub):
    async def update_market_prices(
        self,
        update_market_prices_request: "UpdateMarketPricesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateMarketPricesResponse":
        return await self._unary_unary(
            "/layer.daemons.PriceFeedService/UpdateMarketPrices",
            update_market_prices_request,
            UpdateMarketPricesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MedianValuesServiceStub(betterproto.ServiceStub):
    async def get_all_median_values(
        self,
        get_all_median_values_request: "GetAllMedianValuesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAllMedianValuesResponse":
        return await self._unary_unary(
            "/layer.daemons.MedianValuesService/GetAllMedianValues",
            get_all_median_values_request,
            GetAllMedianValuesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_median_value(
        self,
        get_median_value_request: "GetMedianValueRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMedianValueResponse":
        return await self._unary_unary(
            "/layer.daemons.MedianValuesService/GetMedianValue",
            get_median_value_request,
            GetMedianValueResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TokenBridgeServiceStub(betterproto.ServiceStub):
    async def get_pending_deposit_report(
        self,
        get_pending_deposit_report_request: "GetPendingDepositReportRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPendingDepositReportResponse":
        return await self._unary_unary(
            "/layer.daemons.TokenBridgeService/GetPendingDepositReport",
            get_pending_deposit_report_request,
            GetPendingDepositReportResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PriceFeedServiceBase(ServiceBase):

    async def update_market_prices(
        self, update_market_prices_request: "UpdateMarketPricesRequest"
    ) -> "UpdateMarketPricesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_market_prices(
        self,
        stream: "grpclib.server.Stream[UpdateMarketPricesRequest, UpdateMarketPricesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_market_prices(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.daemons.PriceFeedService/UpdateMarketPrices": grpclib.const.Handler(
                self.__rpc_update_market_prices,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateMarketPricesRequest,
                UpdateMarketPricesResponse,
            ),
        }


class MedianValuesServiceBase(ServiceBase):

    async def get_all_median_values(
        self, get_all_median_values_request: "GetAllMedianValuesRequest"
    ) -> "GetAllMedianValuesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_median_value(
        self, get_median_value_request: "GetMedianValueRequest"
    ) -> "GetMedianValueResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_all_median_values(
        self,
        stream: "grpclib.server.Stream[GetAllMedianValuesRequest, GetAllMedianValuesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_all_median_values(request)
        await stream.send_message(response)

    async def __rpc_get_median_value(
        self,
        stream: "grpclib.server.Stream[GetMedianValueRequest, GetMedianValueResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_median_value(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.daemons.MedianValuesService/GetAllMedianValues": grpclib.const.Handler(
                self.__rpc_get_all_median_values,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAllMedianValuesRequest,
                GetAllMedianValuesResponse,
            ),
            "/layer.daemons.MedianValuesService/GetMedianValue": grpclib.const.Handler(
                self.__rpc_get_median_value,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMedianValueRequest,
                GetMedianValueResponse,
            ),
        }


class TokenBridgeServiceBase(ServiceBase):

    async def get_pending_deposit_report(
        self, get_pending_deposit_report_request: "GetPendingDepositReportRequest"
    ) -> "GetPendingDepositReportResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_pending_deposit_report(
        self,
        stream: "grpclib.server.Stream[GetPendingDepositReportRequest, GetPendingDepositReportResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_pending_deposit_report(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.daemons.TokenBridgeService/GetPendingDepositReport": grpclib.const.Handler(
                self.__rpc_get_pending_deposit_report,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPendingDepositReportRequest,
                GetPendingDepositReportResponse,
            ),
        }
