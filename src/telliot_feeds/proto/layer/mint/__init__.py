# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: layer/mint/genesis.proto, layer/mint/mint.proto, layer/mint/query.proto, layer/mint/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class MsgInit(betterproto.Message):
    authority: str = betterproto.string_field(1)
    """authority is the address that is allowed calling this msg."""


@dataclass(eq=False, repr=False)
class MsgMsgInitResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the mint module's genesis state."""

    bond_denom: str = betterproto.string_field(2)
    """BondDenom is the denomination of the token that should be minted."""


@dataclass(eq=False, repr=False)
class Minter(betterproto.Message):
    """Minter represents the mint state."""

    previous_block_time: datetime = betterproto.message_field(1)
    """PreviousBlockTime is the timestamp of the previous block."""

    bond_denom: str = betterproto.string_field(2)
    """BondDenom is the denomination of the token that should be minted."""

    initialized: bool = betterproto.bool_field(3)
    """init"""


class MsgStub(betterproto.ServiceStub):
    async def init(
        self,
        msg_init: "MsgInit",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgMsgInitResponse":
        return await self._unary_unary(
            "/layer.mint.Msg/Init",
            msg_init,
            MsgMsgInitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    pass


class MsgBase(ServiceBase):

    async def init(self, msg_init: "MsgInit") -> "MsgMsgInitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_init(
        self, stream: "grpclib.server.Stream[MsgInit, MsgMsgInitResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.init(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/layer.mint.Msg/Init": grpclib.const.Handler(
                self.__rpc_init,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgInit,
                MsgMsgInitResponse,
            ),
        }


class QueryBase(ServiceBase):

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {}
