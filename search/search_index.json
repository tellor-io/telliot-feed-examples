{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Telliot Feed Examples \u00b6 Overview \u00b6 This package provides several examples demonstrating how to incorporate the telliot-core package into working TellorX reporter feeds. Scope \u00b6 The TellorX network is open to everyone, and these examples are just one way to access it. You can use all of this repo, parts of it, or not use it at all. You can also make contributions to improve it. Warning Use Telliot and all it's components at your own risk. It may have bugs! Bugs may cost you real money! If you find any, please submit an issue , or better yet create a pull request with a suggested fix.","title":"Home"},{"location":"#telliot-feed-examples","text":"","title":"Telliot Feed Examples"},{"location":"#overview","text":"This package provides several examples demonstrating how to incorporate the telliot-core package into working TellorX reporter feeds.","title":"Overview"},{"location":"#scope","text":"The TellorX network is open to everyone, and these examples are just one way to access it. You can use all of this repo, parts of it, or not use it at all. You can also make contributions to improve it. Warning Use Telliot and all it's components at your own risk. It may have bugs! Bugs may cost you real money! If you find any, please submit an issue , or better yet create a pull request with a suggested fix.","title":"Scope"},{"location":"contributing/","text":"Contributing \u00b6 Development Environment Setup \u00b6 These instructions assume that a working Python interpreter (version >=3.8) is already installed on the system. Clone the repository to a local working directory: git clone https://github.com/tellor-io/telliot-feed-examples.git Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate Install the project using using an editable installation . pip install -e . pip install -r requirements-dev.txt Test Environment \u00b6 Verify the development environment by running pytest and ensure that all tests pass. pytest Making Contributions \u00b6 Once your dev environment is set up, make desired changes, create new tests for those changes, and conform to the style & typing format of the project. To do so, in the project home directory: Run all unit tests: pytest Check code typing: tox -e typing Check style (you may need run this step several times): tox -e style Once all those pass, you're ready to make a pull request to the project's main branch. Link any related issues, tag desired reviewers, and watch the #telliot-feed-examples channel in the community discord for updates.","title":"Developer's Guide"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#development-environment-setup","text":"These instructions assume that a working Python interpreter (version >=3.8) is already installed on the system. Clone the repository to a local working directory: git clone https://github.com/tellor-io/telliot-feed-examples.git Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate Install the project using using an editable installation . pip install -e . pip install -r requirements-dev.txt","title":"Development Environment Setup"},{"location":"contributing/#test-environment","text":"Verify the development environment by running pytest and ensure that all tests pass. pytest","title":"Test Environment"},{"location":"contributing/#making-contributions","text":"Once your dev environment is set up, make desired changes, create new tests for those changes, and conform to the style & typing format of the project. To do so, in the project home directory: Run all unit tests: pytest Check code typing: tox -e typing Check style (you may need run this step several times): tox -e style Once all those pass, you're ready to make a pull request to the project's main branch. Link any related issues, tag desired reviewers, and watch the #telliot-feed-examples channel in the community discord for updates.","title":"Making Contributions"},{"location":"documentation/","text":"Project Documentation \u00b6 Telliot is documented using Material for MkDocs . The latest telliot-core documentation can be found here To compile and view local changes to documentation, use the following command, then open a browser to the link displayed: mkdocs serve","title":"Documentation"},{"location":"documentation/#project-documentation","text":"Telliot is documented using Material for MkDocs . The latest telliot-core documentation can be found here To compile and view local changes to documentation, use the following command, then open a browser to the link displayed: mkdocs serve","title":"Project Documentation"},{"location":"getting-started/","text":"Getting Started \u00b6 Installation of Telliot Feed Examples requires that Python 3.9 or greater is already installed on your system. Install Telliot Feed Examples \u00b6 Optional : Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows Mac M1 python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate python3 -m venv tenv source tenv/bin/activate You can install Telliot Feed Examples and all of it's dependencies (including telliot-core and chained-accounts ) through the command line: pip install telliot-feed-examples Telliot Configuration \u00b6 After installation, Telliot must be personalized to use your own private keys and endpoints. First, create the default configuration files: telliot config init The default configuration files are created in a folder called telliot in the user home folder: ~/telliot \u251c\u2500\u2500 chains.json \u251c\u2500\u2500 endpoints.yaml \u2514\u2500\u2500 main.yaml To show the current configuration: telliot config show Configure endpoints \u00b6 Edit ~/telliot/endpoints.yaml to configure Telliot to use your own endpoints. If you don't have an endpoint, a free one is available at Infura.io . Simply replace INFURA_API_KEY with the one provided by Infura. Endpoints should be configured for both Etherium mainnet and Rinkeby testnet. Warning! All telliot software and reporter feeds should be validated on Rinkeby prior to deploying on mainnet. Note that endpoints must use the websocket protocol because HTTPS endpoints do not support event listeners. If reporting on Polygon, websockets are not supported, so use an HTTPS endpoint Example endpoints.yaml file: type : EndpointList endpoints : - type : RPCEndpoint chain_id : 1 network : mainnet provider : Infura url : wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY} explorer : https://etherscan.io - type : RPCEndpoint chain_id : 4 network : rinkeby provider : Infura url : wss://rinkeby.infura.io/ws/v3{INFURA_API_KEY} explorer : https://rinkeby.etherscan.io - type : RPCEndpoint chain_id : 137 network : mainnet provider : Matic url : https://polygon-mainnet.infura.io/v3/{INFURA_API_KEY} explorer : https://polygonscan.com/ - type : RPCEndpoint chain_id : 80001 network : mumbai provider : Matic url : https://polygon-mumbai.infura.io/v3/{INFURA_API_KEY} explorer : https://mumbai.polygonscan.com/ ... Once you've specified your endpoints, what's left is to configure your account information (private keys, chain IDs, et.) using chained-accounts . Save Account Info \u00b6 Save your encrypted private keys and account information via the command line. Instructions here . Once finished, read the Usage section, then you'll be set to report. Other possible configs \u00b6 AMPL \u00b6 If you'd like to report legacy AMPL values, generate default AMPL configs from the repository's home directory: python3 src/telliot_feed_examples/config.py After, add AMPL api keys (BraveNewCoin/Rapid & AnyBlock) to ~/telliot/ampl.yaml Example ampl.yaml file: type : AMPLConfigOptions anyblock_api_key : 'abc123fakeapikey' rapid_api_key : 'abc123fakeapikey'","title":"Getting started"},{"location":"getting-started/#getting-started","text":"Installation of Telliot Feed Examples requires that Python 3.9 or greater is already installed on your system.","title":"Getting Started"},{"location":"getting-started/#install-telliot-feed-examples","text":"Optional : Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows Mac M1 python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate python3 -m venv tenv source tenv/bin/activate You can install Telliot Feed Examples and all of it's dependencies (including telliot-core and chained-accounts ) through the command line: pip install telliot-feed-examples","title":"Install Telliot Feed Examples"},{"location":"getting-started/#telliot-configuration","text":"After installation, Telliot must be personalized to use your own private keys and endpoints. First, create the default configuration files: telliot config init The default configuration files are created in a folder called telliot in the user home folder: ~/telliot \u251c\u2500\u2500 chains.json \u251c\u2500\u2500 endpoints.yaml \u2514\u2500\u2500 main.yaml To show the current configuration: telliot config show","title":"Telliot Configuration"},{"location":"getting-started/#configure-endpoints","text":"Edit ~/telliot/endpoints.yaml to configure Telliot to use your own endpoints. If you don't have an endpoint, a free one is available at Infura.io . Simply replace INFURA_API_KEY with the one provided by Infura. Endpoints should be configured for both Etherium mainnet and Rinkeby testnet. Warning! All telliot software and reporter feeds should be validated on Rinkeby prior to deploying on mainnet. Note that endpoints must use the websocket protocol because HTTPS endpoints do not support event listeners. If reporting on Polygon, websockets are not supported, so use an HTTPS endpoint Example endpoints.yaml file: type : EndpointList endpoints : - type : RPCEndpoint chain_id : 1 network : mainnet provider : Infura url : wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY} explorer : https://etherscan.io - type : RPCEndpoint chain_id : 4 network : rinkeby provider : Infura url : wss://rinkeby.infura.io/ws/v3{INFURA_API_KEY} explorer : https://rinkeby.etherscan.io - type : RPCEndpoint chain_id : 137 network : mainnet provider : Matic url : https://polygon-mainnet.infura.io/v3/{INFURA_API_KEY} explorer : https://polygonscan.com/ - type : RPCEndpoint chain_id : 80001 network : mumbai provider : Matic url : https://polygon-mumbai.infura.io/v3/{INFURA_API_KEY} explorer : https://mumbai.polygonscan.com/ ... Once you've specified your endpoints, what's left is to configure your account information (private keys, chain IDs, et.) using chained-accounts .","title":"Configure endpoints"},{"location":"getting-started/#save-account-info","text":"Save your encrypted private keys and account information via the command line. Instructions here . Once finished, read the Usage section, then you'll be set to report.","title":"Save Account Info"},{"location":"getting-started/#other-possible-configs","text":"","title":"Other possible configs"},{"location":"getting-started/#ampl","text":"If you'd like to report legacy AMPL values, generate default AMPL configs from the repository's home directory: python3 src/telliot_feed_examples/config.py After, add AMPL api keys (BraveNewCoin/Rapid & AnyBlock) to ~/telliot/ampl.yaml Example ampl.yaml file: type : AMPLConfigOptions anyblock_api_key : 'abc123fakeapikey' rapid_api_key : 'abc123fakeapikey'","title":"AMPL"},{"location":"usage/","text":"Usage \u00b6 This is experimental software! You might lose money! Prerequisites: Getting Started To use any of the telliot datafeed and reporter examples, use the command line interface (CLI) tool. A basic example: $ telliot-examples --account fakename report Be sure to always confirm the correct settings when prompted and read chain-specific usage sections before setting up your reporter! $ telliot-examples -a fakename report telliot-core 0.0.10.dev1 telliot_feed_examples (plugin): Version 0.0.12dev0 Using: eth-rinkeby [staker: dev-acct-4] Reporting with synchronized queries Current chain ID: 4 Expected percent profit: 100.0% Transaction type: 0 Gas Limit: 350000 Legacy gas price (gwei): None Max fee (gwei): None Priority fee (gwei): None Gas price speed: fast Press [ENTER] to confirm settings. Table of Contents \u00b6 Reporting Basics Reporting on Ethereum Reporting on Polygon Reporting Basics \u00b6 Help flag \u00b6 Use the help flag to view available commands and option flags: $ telliot-examples --help Usage: telliot-examples [OPTIONS] COMMAND [ARGS]... Telliot command line interface Options: -a, --account TEXT Name of account used for reporting. -sgt, --signature-tag TEXT use specific signature account by tag -fb, --flashbots / -nfb, --no-flashbots --test_config Runs command with test configuration (developer use only) --help Show this message and exit. Commands: report Report values to Tellor oracle tip Tip TRB for a selected query ID The help flag shows subcommand options as well: $ telliot-examples report --help Usage: telliot-examples report [OPTIONS] Report values to Tellor oracle Options: -qt, --query-tag [eth-usd-legacy|btc-usd-legacy|ampl-legacy|uspce-legacy|trb-usd-legacy|eth-jpy-legacy|ohm-eth-spot] select datafeed using query tag -gl, --gas-limit INTEGER use custom gas limit -mf, --max-fee INTEGER use custom maxFeePerGas (gwei) -pf, --priority-fee INTEGER use custom maxPriorityFeePerGas (gwei) -gp, --gas-price INTEGER use custom legacy gasPrice (gwei) -p, --profit TEXT lower threshold (inclusive) for expected percent profit -tx, --tx-type INTEGER choose transaction type (0 for legacy txs, 2 for EIP-1559) -gps, --gas-price-speed [safeLow|average|fast|fastest] gas price speed for eth gas station API --submit-once / --submit-continuous --help Show this message and exit. Account Flag \u00b6 You must select an account to use for reporting. The account flag ( --account / -a ) is used to retrieve a ChainedAccount with a corresponding name. This ChainedAccount stores the account's checksum address, private key, and chain IDs. Example usage: telliot-examples -a fakeaccountname report Report Command \u00b6 Use the report command to submit data to the TellorX or TellorFlex oracles. Example report command usage: telliot-examples -a bigdaddysatoshi report By default, the reporter will continue to attempt reporting whenever out of reporting lock. Use the --submit-once flag to only report once: telliot-examples -a staker1 report --submit-once Profit Flag \u00b6 Reporting for profit is extremely competitive and profit estimates aren't guarantees that you won't lose money! Use the profit flag ( --profit/-p ) to.. specify an expected profit. The default is 100% profit, which will likely result in your reporter never attempting to report unless you're on a testnet. To bypass profitability checks, use the \"YOLO\" string: telliot-examples -a staker1 report -p YOLO Normal profit flag usage: telliot-examples -a staker4000 report -p 2 Gas, Fee, & Transaction Type Flags \u00b6 If gas fees and transaction types ( --tx-type/-tx ) aren't specified by the user, defaults and estimates will be used/retrieved. The --gas-price/-gp flag is for legacy transactions, while the --max-fee/-mf and --priority-fee/-pf flags are for type 2 transactions (EIP-1559). If sending legacy transactions, you can also override the gas price estimate speed using the --gas-price-speed/-gps flag. To set the gas limit used for the actual submitValue() transaction, use the --gas-limit/-gl flag. Example usage: telliot-examples -a kevin report -tx 0 -gl 310000 -gp 9001 -p 22 Reporting on Ethereum \u00b6 Both transaction types (0 & 2) are supported for reporting. Regular Usage \u00b6 It's not advised to report without Flashbots, unless on a testnet like Rinkeby, because transactions sent to the public mempool on Ethereum mainnet will most likely be front-run , so you'll lose money. If you want to report without flashbots on Ethereum mainnet, use the --no-flashbots/-nfb flag. Example usage: telliot-examples -a mainnetstaker7 -nfb report Using Flashbots \u00b6 The Flashbots organization provides an endpoint, or relay, to bypass the public mempool and submit transaction bundles directly to miners. More info here . Even using Flashbots, reporting on Ethereum mainnet is competitive. Other endpoints are available to experiment with ( MiningDAO , mistX ). If the account you've selected for reporting is staked on mainnet, then the reporter will send transactions to the Flashbots relay by default. To explicitly use Flashbots, include the --flashbots/-fb flag. Reporting with Flashbots on testnet is not supported. Create Signatory Account \u00b6 In order to submit transactions through the Flashbots relay, you need an additional Ethereum acccount. The Flashbots organization uses this signatory account's address to identify you and build your historical reputation as a MEV \"searcher\" . This signatory account doesn't need any funds in it. Store it it as a ChainedAccount in the same way you would any other (see Getting Started ). When reporting, select your signatory account by tag as well as your staked mainnet account. Use the --account/-a and --signature-tag/-sgt flags. Example usage: telliot-examples -a mainnetstaker1 -sgt sigacct -fb report Reporting on Polygon \u00b6 Only legacy transaction types are supported. Also, TellorFlex on Polygon has no built-in rewards for reporting, so profitability checks are skipped. Read more about TellorFlex on Polygon here . Example usage: telliot-examples -a mumbaistaker report Staking \u00b6 With TellorFlex on Polygon, reporters can stake multiple times. Each stake is 10 TRB, so if you stake 140 TRB, you've staked 14 times. The PolygonReporter will prompt the user to enter a desired stake amount: Enter amount TRB to stake if unstaked: [10.0]: If the current account being used to report isn't staked, the reporter will use the CLI-entered stake amount to stake. Also, if the reporter account's actual stake is reduced after a dispute, the reporter will attempt to stake the difference in TRB to return to the original desired stake amount. Example: - user enters desired stake of 50 - reporter identifies that current address has only 40 TRB staked - reporter stakes an additional 10 TRB, bringing the total amount staked to 50 TRB - reporter reports - reporter waits while in reporter lock ... Reporter Lock \u00b6 TellorX reporters on Ethereum must wait 12 hours between each data sumbission. The reporter lock for TellorFlex on Polygon is variable. It depends on how many stakes an account has. Specifically: reporter_lock = 12 hours / number_of_stakes So if you have 120 TRB staked, you can report every hour.","title":"Usage"},{"location":"usage/#usage","text":"This is experimental software! You might lose money! Prerequisites: Getting Started To use any of the telliot datafeed and reporter examples, use the command line interface (CLI) tool. A basic example: $ telliot-examples --account fakename report Be sure to always confirm the correct settings when prompted and read chain-specific usage sections before setting up your reporter! $ telliot-examples -a fakename report telliot-core 0.0.10.dev1 telliot_feed_examples (plugin): Version 0.0.12dev0 Using: eth-rinkeby [staker: dev-acct-4] Reporting with synchronized queries Current chain ID: 4 Expected percent profit: 100.0% Transaction type: 0 Gas Limit: 350000 Legacy gas price (gwei): None Max fee (gwei): None Priority fee (gwei): None Gas price speed: fast Press [ENTER] to confirm settings.","title":"Usage"},{"location":"usage/#table-of-contents","text":"Reporting Basics Reporting on Ethereum Reporting on Polygon","title":"Table of Contents"},{"location":"usage/#reporting-basics","text":"","title":"Reporting Basics"},{"location":"usage/#help-flag","text":"Use the help flag to view available commands and option flags: $ telliot-examples --help Usage: telliot-examples [OPTIONS] COMMAND [ARGS]... Telliot command line interface Options: -a, --account TEXT Name of account used for reporting. -sgt, --signature-tag TEXT use specific signature account by tag -fb, --flashbots / -nfb, --no-flashbots --test_config Runs command with test configuration (developer use only) --help Show this message and exit. Commands: report Report values to Tellor oracle tip Tip TRB for a selected query ID The help flag shows subcommand options as well: $ telliot-examples report --help Usage: telliot-examples report [OPTIONS] Report values to Tellor oracle Options: -qt, --query-tag [eth-usd-legacy|btc-usd-legacy|ampl-legacy|uspce-legacy|trb-usd-legacy|eth-jpy-legacy|ohm-eth-spot] select datafeed using query tag -gl, --gas-limit INTEGER use custom gas limit -mf, --max-fee INTEGER use custom maxFeePerGas (gwei) -pf, --priority-fee INTEGER use custom maxPriorityFeePerGas (gwei) -gp, --gas-price INTEGER use custom legacy gasPrice (gwei) -p, --profit TEXT lower threshold (inclusive) for expected percent profit -tx, --tx-type INTEGER choose transaction type (0 for legacy txs, 2 for EIP-1559) -gps, --gas-price-speed [safeLow|average|fast|fastest] gas price speed for eth gas station API --submit-once / --submit-continuous --help Show this message and exit.","title":"Help flag"},{"location":"usage/#account-flag","text":"You must select an account to use for reporting. The account flag ( --account / -a ) is used to retrieve a ChainedAccount with a corresponding name. This ChainedAccount stores the account's checksum address, private key, and chain IDs. Example usage: telliot-examples -a fakeaccountname report","title":"Account Flag"},{"location":"usage/#report-command","text":"Use the report command to submit data to the TellorX or TellorFlex oracles. Example report command usage: telliot-examples -a bigdaddysatoshi report By default, the reporter will continue to attempt reporting whenever out of reporting lock. Use the --submit-once flag to only report once: telliot-examples -a staker1 report --submit-once","title":"Report Command"},{"location":"usage/#profit-flag","text":"Reporting for profit is extremely competitive and profit estimates aren't guarantees that you won't lose money! Use the profit flag ( --profit/-p ) to.. specify an expected profit. The default is 100% profit, which will likely result in your reporter never attempting to report unless you're on a testnet. To bypass profitability checks, use the \"YOLO\" string: telliot-examples -a staker1 report -p YOLO Normal profit flag usage: telliot-examples -a staker4000 report -p 2","title":"Profit Flag"},{"location":"usage/#gas-fee-transaction-type-flags","text":"If gas fees and transaction types ( --tx-type/-tx ) aren't specified by the user, defaults and estimates will be used/retrieved. The --gas-price/-gp flag is for legacy transactions, while the --max-fee/-mf and --priority-fee/-pf flags are for type 2 transactions (EIP-1559). If sending legacy transactions, you can also override the gas price estimate speed using the --gas-price-speed/-gps flag. To set the gas limit used for the actual submitValue() transaction, use the --gas-limit/-gl flag. Example usage: telliot-examples -a kevin report -tx 0 -gl 310000 -gp 9001 -p 22","title":"Gas, Fee, &amp; Transaction Type Flags"},{"location":"usage/#reporting-on-ethereum","text":"Both transaction types (0 & 2) are supported for reporting.","title":"Reporting on Ethereum"},{"location":"usage/#regular-usage","text":"It's not advised to report without Flashbots, unless on a testnet like Rinkeby, because transactions sent to the public mempool on Ethereum mainnet will most likely be front-run , so you'll lose money. If you want to report without flashbots on Ethereum mainnet, use the --no-flashbots/-nfb flag. Example usage: telliot-examples -a mainnetstaker7 -nfb report","title":"Regular Usage"},{"location":"usage/#using-flashbots","text":"The Flashbots organization provides an endpoint, or relay, to bypass the public mempool and submit transaction bundles directly to miners. More info here . Even using Flashbots, reporting on Ethereum mainnet is competitive. Other endpoints are available to experiment with ( MiningDAO , mistX ). If the account you've selected for reporting is staked on mainnet, then the reporter will send transactions to the Flashbots relay by default. To explicitly use Flashbots, include the --flashbots/-fb flag. Reporting with Flashbots on testnet is not supported.","title":"Using Flashbots"},{"location":"usage/#create-signatory-account","text":"In order to submit transactions through the Flashbots relay, you need an additional Ethereum acccount. The Flashbots organization uses this signatory account's address to identify you and build your historical reputation as a MEV \"searcher\" . This signatory account doesn't need any funds in it. Store it it as a ChainedAccount in the same way you would any other (see Getting Started ). When reporting, select your signatory account by tag as well as your staked mainnet account. Use the --account/-a and --signature-tag/-sgt flags. Example usage: telliot-examples -a mainnetstaker1 -sgt sigacct -fb report","title":"Create Signatory Account"},{"location":"usage/#reporting-on-polygon","text":"Only legacy transaction types are supported. Also, TellorFlex on Polygon has no built-in rewards for reporting, so profitability checks are skipped. Read more about TellorFlex on Polygon here . Example usage: telliot-examples -a mumbaistaker report","title":"Reporting on Polygon"},{"location":"usage/#staking","text":"With TellorFlex on Polygon, reporters can stake multiple times. Each stake is 10 TRB, so if you stake 140 TRB, you've staked 14 times. The PolygonReporter will prompt the user to enter a desired stake amount: Enter amount TRB to stake if unstaked: [10.0]: If the current account being used to report isn't staked, the reporter will use the CLI-entered stake amount to stake. Also, if the reporter account's actual stake is reduced after a dispute, the reporter will attempt to stake the difference in TRB to return to the original desired stake amount. Example: - user enters desired stake of 50 - reporter identifies that current address has only 40 TRB staked - reporter stakes an additional 10 TRB, bringing the total amount staked to 50 TRB - reporter reports - reporter waits while in reporter lock ...","title":"Staking"},{"location":"usage/#reporter-lock","text":"TellorX reporters on Ethereum must wait 12 hours between each data sumbission. The reporter lock for TellorFlex on Polygon is variable. It depends on how many stakes an account has. Specifically: reporter_lock = 12 hours / number_of_stakes So if you have 120 TRB staked, you can report every hour.","title":"Reporter Lock"}]}