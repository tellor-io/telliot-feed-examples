{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Telliot Feed Examples \u00b6 Overview \u00b6 This package provides several examples demonstrating how to incorporate the telliot-core package into working TellorX reporter feeds. Scope \u00b6 The TellorX network is open to everyone, and these examples are just one way to access it. You can use all of this repo, parts of it, or not use it at all. You can also make contributions to improve it. Warning Use Telliot and all it's components at your own risk. It may have bugs! Bugs may cost you real money! If you find any, please submit an issue , or better yet create a pull request with a suggested fix.","title":"Home"},{"location":"#telliot-feed-examples","text":"","title":"Telliot Feed Examples"},{"location":"#overview","text":"This package provides several examples demonstrating how to incorporate the telliot-core package into working TellorX reporter feeds.","title":"Overview"},{"location":"#scope","text":"The TellorX network is open to everyone, and these examples are just one way to access it. You can use all of this repo, parts of it, or not use it at all. You can also make contributions to improve it. Warning Use Telliot and all it's components at your own risk. It may have bugs! Bugs may cost you real money! If you find any, please submit an issue , or better yet create a pull request with a suggested fix.","title":"Scope"},{"location":"contributing/","text":"Contributing \u00b6 Development Environment Setup \u00b6 These instructions assume that a working Python interpreter (version >=3.8) is already installed on the system. Clone the repository to a local working directory: git clone https://github.com/tellor-io/telliot-feed-examples.git Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate Install the project using using an editable installation . pip install -e . pip install -r requirements-dev.txt Test Environment \u00b6 Verify the development environment by running pytest and ensure that all tests pass. pytest Making Contributions \u00b6 Once your dev environment is set up, make desired changes, create new tests for those changes, and conform to the style & typing format of the project. To do so, in the project home directory: Run all unit tests: pytest Check code typing: tox -e typing Check style (you may need run this step several times): tox -e style Once all those pass, you're ready to make a pull request to the project's main branch. Link any related issues, tag desired reviewers, and watch the #telliot-feed-examples channel in the community discord for updates.","title":"Developer's Guide"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#development-environment-setup","text":"These instructions assume that a working Python interpreter (version >=3.8) is already installed on the system. Clone the repository to a local working directory: git clone https://github.com/tellor-io/telliot-feed-examples.git Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate Install the project using using an editable installation . pip install -e . pip install -r requirements-dev.txt","title":"Development Environment Setup"},{"location":"contributing/#test-environment","text":"Verify the development environment by running pytest and ensure that all tests pass. pytest","title":"Test Environment"},{"location":"contributing/#making-contributions","text":"Once your dev environment is set up, make desired changes, create new tests for those changes, and conform to the style & typing format of the project. To do so, in the project home directory: Run all unit tests: pytest Check code typing: tox -e typing Check style (you may need run this step several times): tox -e style Once all those pass, you're ready to make a pull request to the project's main branch. Link any related issues, tag desired reviewers, and watch the #telliot-feed-examples channel in the community discord for updates.","title":"Making Contributions"},{"location":"documentation/","text":"Project Documentation \u00b6 Telliot is documented using Material for MkDocs . The latest telliot-core documentation can be found here To compile and view local changes to documentation, use the following command, then open a browser to the link displayed: mkdocs serve","title":"Documentation"},{"location":"documentation/#project-documentation","text":"Telliot is documented using Material for MkDocs . The latest telliot-core documentation can be found here To compile and view local changes to documentation, use the following command, then open a browser to the link displayed: mkdocs serve","title":"Project Documentation"},{"location":"getting-started/","text":"Getting Started \u00b6 Installation of Telliot Feed Examples requires that Python 3.8 or greater is already installed on your system. Install Telliot Feed Examples \u00b6 Optional : Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate You can install Telliot Feed Examples and all of it's dependencies (including telliot-core ) through the command line: pip install telliot-feed-examples Telliot Configuration \u00b6 After installation, Telliot must be personalized to use your own private keys and endpoints. First, create the default configuration files: telliot config init The default configuration files are created in a folder called telliot in the user home folder: Saved config 'main' to ~/telliot/main.yaml Saved config 'endpoints' to ~/telliot/endpoints.yaml Saved config 'chains' to ~/telliot/chains.json To show the current configuration: telliot config show Main Configuration File \u00b6 The main configuration file allows you to choose which network Telliot will interact with. By default, Telliot is configured to run on Rinkeby testnet, as shown in the example below. Edit the ~/telliot/main.yaml config file for the desired configuration. To run on Etherium mainnet, use chain_id: 1 and network: mainnet . To submit values to the Tellor oracle, a private_key must also be configured. Example main configuration file: type : MainConfig loglevel : INFO chain_id : 4 network : rinkeby private_key : '' Configure endpoints \u00b6 Edit ~/telliot/endpoints.yaml to configure Telliot to use your own endpoints. If you don't have an endpoint, a free one is available at Infura.io . Simply replace INFURA_API_KEY with the one provided by Infura. Endpoints should be configured for both Etherium mainnet and Rinkeby testnet. Warning All telliot software and reporter feeds should be validated on Rinkeby prior to deploying on mainnet. Note that endpoints must use the websocket protocol because HTTPS endpoints do not support event listeners. Example endpoints.yaml file: type : EndpointList endpoints : - type : RPCEndpoint chain_id : 1 network : mainnet provider : Infura url : wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY} explorer : https://etherscan.io - type : RPCEndpoint chain_id : 4 network : rinkeby provider : Infura url : wss://rinkeby.infura.io/ws/v3{INFURA_API_KEY} explorer : https://rinkeby.etherscan.io","title":"Getting started"},{"location":"getting-started/#getting-started","text":"Installation of Telliot Feed Examples requires that Python 3.8 or greater is already installed on your system.","title":"Getting Started"},{"location":"getting-started/#install-telliot-feed-examples","text":"Optional : Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate You can install Telliot Feed Examples and all of it's dependencies (including telliot-core ) through the command line: pip install telliot-feed-examples","title":"Install Telliot Feed Examples"},{"location":"getting-started/#telliot-configuration","text":"After installation, Telliot must be personalized to use your own private keys and endpoints. First, create the default configuration files: telliot config init The default configuration files are created in a folder called telliot in the user home folder: Saved config 'main' to ~/telliot/main.yaml Saved config 'endpoints' to ~/telliot/endpoints.yaml Saved config 'chains' to ~/telliot/chains.json To show the current configuration: telliot config show","title":"Telliot Configuration"},{"location":"getting-started/#main-configuration-file","text":"The main configuration file allows you to choose which network Telliot will interact with. By default, Telliot is configured to run on Rinkeby testnet, as shown in the example below. Edit the ~/telliot/main.yaml config file for the desired configuration. To run on Etherium mainnet, use chain_id: 1 and network: mainnet . To submit values to the Tellor oracle, a private_key must also be configured. Example main configuration file: type : MainConfig loglevel : INFO chain_id : 4 network : rinkeby private_key : ''","title":"Main Configuration File"},{"location":"getting-started/#configure-endpoints","text":"Edit ~/telliot/endpoints.yaml to configure Telliot to use your own endpoints. If you don't have an endpoint, a free one is available at Infura.io . Simply replace INFURA_API_KEY with the one provided by Infura. Endpoints should be configured for both Etherium mainnet and Rinkeby testnet. Warning All telliot software and reporter feeds should be validated on Rinkeby prior to deploying on mainnet. Note that endpoints must use the websocket protocol because HTTPS endpoints do not support event listeners. Example endpoints.yaml file: type : EndpointList endpoints : - type : RPCEndpoint chain_id : 1 network : mainnet provider : Infura url : wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY} explorer : https://etherscan.io - type : RPCEndpoint chain_id : 4 network : rinkeby provider : Infura url : wss://rinkeby.infura.io/ws/v3{INFURA_API_KEY} explorer : https://rinkeby.etherscan.io","title":"Configure endpoints"},{"location":"usage/","text":"Usage \u00b6 To use any of the telliot datafeed and reporter examples, use the command line interface (CLI), telliot-examples . Once this package is installed, any of the below commands are available to use. Note, by default, the report command will have the reporter submit values every ~12 hours on the Rinkeby test network. Also, if not specified, there is no maximum gas price used and profitability is not enforced. Even if you set a profit percent threshold, you could still lose money if submitting on mainnet! Commands \u00b6 To use any of this package's subcommands, first invoke telliot-examples followed by any subcommands. Help command \u00b6 Use the help command to view subcommands, flag options, and their descriptions: user:~/$ telliot-examples --help Usage: telliot-examples [OPTIONS] COMMAND [ARGS]... Telliot command line interface Options: -pk, --private-key TEXT override the config's private key -cid, --chain-id INTEGER override the config's chain ID --help Show this message and exit. Commands: report Report values to Tellor oracle Report command \u00b6 The main subcommand of the telliot-examples CLI is report . Here's an example of reporting the USPCE value once: telliot-examples report --legacy-id 41 --submit-once Each of the command line option flags have shorter versions. For example, the shorter version of --legacy-id is -lid . To report the price of ETH/USD every ~12 hours: telliot-examples report -lid 1 Use the help command to view all the report subcommand options: user:~/$ telliot-examples report --help Usage: telliot-examples report [OPTIONS] Report values to Tellor oracle Options: -lid, --legacy-id TEXT report to a legacy ID [required] -mgp, --max-gas-price INTEGER maximum gas price used by reporter -p, --profit FLOAT lower threshold (inclusive) for expected percent profit --submit-once / --submit-continuous --help Show this message and exit. Here's an exampels of reporting once with a maximum gas price (gwei) of 42 with an expected profit percentage greater than or equal to 2%: telliot-examples report -lid 50 -mgp 42 -p 2","title":"Usage"},{"location":"usage/#usage","text":"To use any of the telliot datafeed and reporter examples, use the command line interface (CLI), telliot-examples . Once this package is installed, any of the below commands are available to use. Note, by default, the report command will have the reporter submit values every ~12 hours on the Rinkeby test network. Also, if not specified, there is no maximum gas price used and profitability is not enforced. Even if you set a profit percent threshold, you could still lose money if submitting on mainnet!","title":"Usage"},{"location":"usage/#commands","text":"To use any of this package's subcommands, first invoke telliot-examples followed by any subcommands.","title":"Commands"},{"location":"usage/#help-command","text":"Use the help command to view subcommands, flag options, and their descriptions: user:~/$ telliot-examples --help Usage: telliot-examples [OPTIONS] COMMAND [ARGS]... Telliot command line interface Options: -pk, --private-key TEXT override the config's private key -cid, --chain-id INTEGER override the config's chain ID --help Show this message and exit. Commands: report Report values to Tellor oracle","title":"Help command"},{"location":"usage/#report-command","text":"The main subcommand of the telliot-examples CLI is report . Here's an example of reporting the USPCE value once: telliot-examples report --legacy-id 41 --submit-once Each of the command line option flags have shorter versions. For example, the shorter version of --legacy-id is -lid . To report the price of ETH/USD every ~12 hours: telliot-examples report -lid 1 Use the help command to view all the report subcommand options: user:~/$ telliot-examples report --help Usage: telliot-examples report [OPTIONS] Report values to Tellor oracle Options: -lid, --legacy-id TEXT report to a legacy ID [required] -mgp, --max-gas-price INTEGER maximum gas price used by reporter -p, --profit FLOAT lower threshold (inclusive) for expected percent profit --submit-once / --submit-continuous --help Show this message and exit. Here's an exampels of reporting once with a maximum gas price (gwei) of 42 with an expected profit percentage greater than or equal to 2%: telliot-examples report -lid 50 -mgp 42 -p 2","title":"Report command"}]}